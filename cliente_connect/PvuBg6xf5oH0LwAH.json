{
  "createdAt": "2025-03-06T01:30:32.843Z",
  "updatedAt": "2025-03-19T16:05:44.738Z",
  "id": "PvuBg6xf5oH0LwAH",
  "name": "#5| Agente de Atendimento - Naka",
  "active": true,
  "nodes": [
    {
      "parameters": {
        "queue": "agAtendimento",
        "options": {
          "arguments": {
            "argument": [
              {
                "key": "x-queue-type",
                "value": "quorum"
              }
            ]
          },
          "acknowledge": "executionFinishes",
          "jsonParseBody": true,
          "onlyContent": true
        }
      },
      "type": "n8n-nodes-base.rabbitmqTrigger",
      "typeVersion": 1,
      "position": [
        -1240,
        -600
      ],
      "id": "eedaf863-2a2d-4ed2-910b-e794a5b0f092",
      "name": "RabbitMQ Trigger",
      "credentials": {
        "rabbitmq": {
          "id": "r7HKpgodPDe0c1iT",
          "name": "RabbitMQ - Connecta"
        }
      }
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4o",
          "mode": "list",
          "cachedResultName": "gpt-4o"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        -420,
        -120
      ],
      "id": "a65362a7-8922-4f03-a940-5b70bd431137",
      "name": "OpenAI Chat Model",
      "credentials": {
        "openAiApi": {
          "id": "Ug76Jt0WOP7E4x1r",
          "name": "OpenAi - Connecta"
        }
      }
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $('RabbitMQ Trigger').item.json.session_id }}",
        "contextWindowLength": 15
      },
      "type": "@n8n/n8n-nodes-langchain.memoryPostgresChat",
      "typeVersion": 1.3,
      "position": [
        -280,
        -120
      ],
      "id": "84df46c8-a3e5-4bc9-983e-85661ca7e616",
      "name": "Postgres Chat Memory",
      "credentials": {
        "postgres": {
          "id": "8r0eU4HHjh6sf4sO",
          "name": "Postgres - Connecta"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "484e8db7-5134-4100-a559-edea35794f6a",
              "name": "iaMessage",
              "value": "={{ $json.output.split() }}",
              "type": "array"
            },
            {
              "id": "4fcd382f-fa14-4f68-9598-b6ebe0a0c9e5",
              "name": "",
              "value": "",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        140,
        -300
      ],
      "id": "2313cf67-af59-4a63-9b5b-8c714a000c23",
      "name": "Set_Split"
    },
    {
      "parameters": {
        "fieldToSplitOut": "={{ $json.iaMessage[0] }}",
        "options": {}
      },
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        360,
        -300
      ],
      "id": "6f9e41c6-cba7-4c34-a321-6d834df251e7",
      "name": "Split Out",
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        620,
        -300
      ],
      "id": "a1935bdc-f62b-4379-9aa5-9b03cd3efc22",
      "name": "Loop Over Items"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        820,
        -440
      ],
      "id": "d0c00bae-f2b0-4b96-85db-0d34288c6cf3",
      "name": "Finished"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://dinastia-evolution.lfigsi.easypanel.host/message/sendText/Deebs",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "apiKey",
              "value": "46A8DD04E743-41B1-9AFD-78D9B9DB137B"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "number",
              "value": "={{ $('RabbitMQ Trigger').item.json.session_id }}"
            },
            {
              "name": "text",
              "value": "={{ $('Set_Split').item.json.iaMessage[0] }}"
            }
          ]
        },
        "options": {}
      },
      "id": "54579f47-0a44-420f-8190-ff8ddc7f4b4c",
      "name": "respondeWhatsapp",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        820,
        -120
      ]
    },
    {
      "parameters": {
        "amount": 4
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        1040,
        -120
      ],
      "id": "bb8aa4fa-c856-428c-aca0-31d70559c7c8",
      "name": "Wait",
      "webhookId": "1d2a2b6e-afda-49d8-8cd1-4e188bc642f2"
    },
    {
      "parameters": {
        "name": "Check_Availability",
        "description": "Chame essa tool para buscar os dias e horários disponíveis na agenda para retornar para o usuários opções disponíveis de agendamento de consulta.\n\n**Envie o dia de interesse diretamente como o o usuário requisitar, por exemplo:**\n\nterça\ndia 23\namanhã\nsemana que vem\n\n**Janelas de horário:**\n\nSe o usuário informar de manhã envie 09h00 até 12h00.\nSe o usuário informar de tarde envie 12h00 até 18h00.\nSe o usuário informar um valor de horário, verifique se está entre manhã ou tarde e envie o respectivo valor.\n\n**Constraints:**\nEvite realizar adaptações no dia que o usuário solicitou, apenas envie diretamente o solicitado.",
        "workflowId": {
          "__rl": true,
          "value": "T6ledF0U3v58HChG",
          "mode": "list",
          "cachedResultName": "#6 Tool | Check Avaliability"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {},
          "matchingColumns": [],
          "schema": [],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        }
      },
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "typeVersion": 2,
      "position": [
        -140,
        -120
      ],
      "id": "648c8607-9203-4795-a29e-67c6ec45cd95",
      "name": "Check_Availability"
    },
    {
      "parameters": {
        "name": "Create_Event",
        "description": "=Chame esta tool quando o usuário confirmar o horário de agendamento. O input deve ser o dia e o horário desejado pelo usuário.\n\n**Envie na query:**\n\nO dia e hora da consulta no formato \"2025-02-06T15:00:00Z\"\na sessionId do usuário: {{ $('RabbitMQ Trigger').item.json.session_id }}\n\nExemplo de query para enviar:\n\n  {\n    \"dataEscolhida\": \"2025-02-06T15:00:00Z\",\n    \"sessionID\": {{ $('RabbitMQ Trigger').item.json.session_id }}\"\n  }",
        "workflowId": {
          "__rl": true,
          "value": "rPdL7Aqs2pyveYtW",
          "mode": "list",
          "cachedResultName": "#7 Tool | Create_Event"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {
            "sessionID": "={{ $('RabbitMQ Trigger').item.json.session_id }}",
            "dataEscolhida": "={{ $fromAI('dataEscolhida', 'data selecionada e confirmada pelo usuário', string) }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "dataEscolhida",
              "displayName": "dataEscolhida",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            },
            {
              "id": "sessionID",
              "displayName": "sessionID",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        }
      },
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "typeVersion": 2,
      "position": [
        0,
        -120
      ],
      "id": "9ee7c37a-28be-42f7-979f-59d6c47053a5",
      "name": "Create_Event"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "DELETE FROM n8n_chat_histories;",
        "options": {}
      },
      "id": "84bec2fc-6703-4909-9365-7f7669a9e239",
      "name": "Deletar_todas_as_mensagens",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.5,
      "position": [
        -240,
        -500
      ],
      "credentials": {
        "postgres": {
          "id": "8r0eU4HHjh6sf4sO",
          "name": "Postgres - Connecta"
        }
      }
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.errorTrigger",
      "typeVersion": 1,
      "position": [
        -360,
        440
      ],
      "id": "52038bc8-881d-41e3-b0e8-6b40dbad8eb8",
      "name": "Error Trigger"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "fcd5c9ae-cd57-44c5-bd49-2cef3ffc4bf1",
              "name": "execution.url",
              "value": "={{ $json.execution.url }}",
              "type": "string"
            },
            {
              "id": "f49583b3-5c68-415b-b1bc-4c5ee44542bf",
              "name": "execution.lastNodeExecuted",
              "value": "={{ $json.execution.lastNodeExecuted }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -160,
        440
      ],
      "id": "57ac91fa-25d8-4abb-b9ed-6907902b1021",
      "name": "Edit Fields"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.messages }}",
        "options": {
          "systemMessage": "=Não responda nada que não esteja em <INSTRUCAO></INSTRUCAO>, não de nenhuma  informação que não esteja dentro de <INSTRUCAO></INSTRUCAO>. Aja apenas como descrito dentro de <INSTRUCAO></INSTRUCAO>.\n\n<INSTRUCAO>\nVocê é Jaqueline, uma especialista em classificar mensagens de clientes. \n\nA sua função é identificar a intenção na mensagem deste cliente em apenas 2 categories: \"informacoes\" ou \"agendamentos\".\n\nAnalise sempre o histórico da conversa antes de decidir.\n\nApenas retorne o texto \"informacoes\" ou \"agendamentos\", mais nada.\n\n<EXEMPLO>\nHuman: Não precisa mais fazer o reagendamento\nAI: \"agendamentos\"\n\nHuman: Que horas são agora?\nAI: \"informacoes\"\n\nHuman: \"Joana\"\nAI: \"informacoes\"\n\nHuman: \"Carlos\"\nAI: \"informacoes\"\n\nHuman: \"Meu nome é Aline\"\nAI: \"informacoes\"\n\nHuman: Quais os tipos de cirurgia bariátrica?\nAI: \"informacoes\"\n\nHuman: Vocês aceitam quais convênios?\nAI: \"informacoes\"\n\nHuman: Qual o valor da consulta particular?\nAI: \"informacoes\"\n\nHuman: Você recomenda algum medicamento para emagrecer?\nAI: \"informacoes\"\n\n\n</EXEMPLO>\n\n<EXEMPLO>\nHuman: Olá eu gostaria de agendar uma consulta para amanhã as 9h\nAI: \"agendamentos\"\nHuman: Olá eu gostaria de agendar uma consulta amanha as 9h\nAI: Amanhã, dia 25 de novembro, às 9h está disponível. Poderia confirmar esse horário?\nHuman: pode confirmar\nHuman: poderia\nHuman: sim\nHuman: pode ser\nHuman: pois não\nHuman: beleza\nHuman: blz\nHuman: com certeza\n\nHuman: Quais os próximos horários disponíveis você tem?\nAI: agendamentos\n\nHuman: Quais datas sugere?\nAI: agendamentos\n\n</EXEMPLO>\n</INSTRUCAO>"
        }
      },
      "id": "c4c05948-feec-49dd-8435-80098991bbf7",
      "name": "recepcionista",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.6,
      "position": [
        -1000,
        -600
      ],
      "retryOnFail": true,
      "maxTries": 3,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "name": "get_time",
        "description": "Útil para consultar o horário atual.",
        "workflowId": {
          "__rl": true,
          "value": "HwWpu1zCI4vzHWuK",
          "mode": "id"
        },
        "fields": {
          "values": [
            {
              "name": "=time",
              "stringValue": "={{ $('Webhook').item.json.body.date_time }}"
            }
          ]
        }
      },
      "id": "fad4ac3c-58a2-4246-aed8-91c294ded623",
      "name": "get_time",
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "typeVersion": 1.2,
      "position": [
        -760,
        -380
      ]
    },
    {
      "parameters": {
        "model": "gpt-4o",
        "options": {}
      },
      "id": "61a98ff9-32a3-4b97-857d-07b973b34ec7",
      "name": "OpenAI Chat Model2",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1,
      "position": [
        -1060,
        -380
      ],
      "credentials": {
        "openAiApi": {
          "id": "Ug76Jt0WOP7E4x1r",
          "name": "OpenAi - Connecta"
        }
      }
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.output }}",
                    "rightValue": "informacoes",
                    "operator": {
                      "type": "string",
                      "operation": "contains"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "informacoes"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "b9cf9869-8857-4e8e-bc38-e9716c978784",
                    "leftValue": "={{ $json.output }}",
                    "rightValue": "agendamentos",
                    "operator": {
                      "type": "string",
                      "operation": "contains"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "agendamentos"
            }
          ]
        },
        "options": {}
      },
      "id": "f9a6851b-f940-4ce5-a0fe-68ef72ddd194",
      "name": "intencao",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        -660,
        -600
      ]
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $('RabbitMQ Trigger').item.json.messages }}",
        "options": {
          "systemMessage": "=<Persona>\nSeu nome é Letícia, você é uma profissional de Suporte e atendimento ultra qualificada na área bariátrica. Você é simpática, divertida e muito educada com os clientes. Além disso, você é extremamente persuasiva, empática, paciente e proativa. Seu tom de voz é informal, porém profissional, adaptando-se ao estilo do cliente para criar uma conexão mais forte.\n</Persona>\n\n<Contexto>\nO dia e hora atual é: {{(() => {\n    // Define as opções para formatar a data e hora no fuso horário correto\n    const options = {\n        timeZone: \"America/Sao_Paulo\",\n        hour12: false\n    };\n    // Obtém a data atual ajustada ao fuso horário de São Paulo\n    const currentDate = new Date();\n    // Formata a data e hora no padrão ISO 8601 (sem erros de UTC)\n    const formattedDate = new Intl.DateTimeFormat(\"en-CA\", {\n        ...options,\n        dateStyle: \"short\",\n        timeStyle: \"medium\"\n    }).format(currentDate).replace(\", \", \"T\") + \"Z\";\n\n    // Obtém o nome do dia da semana no fuso horário correto\n    const diasDaSemana = [\n        \"domingo\", \"segunda-feira\", \"terça-feira\",\n        \"quarta-feira\", \"quinta-feira\", \"sexta-feira\", \"sábado\"\n    ];\n\n    // Ajusta o fuso horário e calcula o índice correto do dia da semana\n    const localDate = new Date(currentDate.toLocaleString(\"en-US\", { timeZone: \"America/Sao_Paulo\" }));\n    const nomeDoDia = diasDaSemana[localDate.getDay()];\n\n    // Retorna o resultado completo\n    return `${nomeDoDia.charAt(0).toUpperCase() + nomeDoDia.slice(1)}, ${formattedDate}`;\n})();}}.\nVocê receberá leads que chegam diretamente no WhatsApp. Você não recebe nenhuma informação prévia sobre o lead. Portanto, é importante iniciar o atendimento perguntando educadamente o nome do lead e qual tratamento ele está buscando. Esteja preparada para responder a uma variedade de dúvidas médicas ou comerciais além de preocupações que o lead possa ter. Você deve OBRIGATORIAMENTE identificar o nome do paciente e o tratamento de interesse dele antes de prosseguir com as demais etapas do atendimento.\nUm exemplo prático seria:\nOlá! Aqui é a Letícia da Clínica Nakamura. 😊\nPosso saber seu nome para personalizar o nosso atendimento?\nApós o lead responder o nome, se você ainda desconhece o tratamento que interessa para o lead, você pode perguntar:\nMuito prazer, [nome do lead]! Em que posso ajudar?\nSeguindo o padrão brasileiro de data e hora (DD/MM/AAAA e HH), o assistente opera no fuso horário \"America/Sao_Paulo\".\n</Contexto>\n<Objetivo>\nSua missão é responder a todas as dúvidas do usuário, relacionadas a tratamentos bariátricos, técnias cirurgicas, questões comerciais, horários de funcionamento, convênios médicos, etc.\nPara responder estas questões, você deve em 100% das oportunidades, acessar a tool <vector_store>.\n</Objetivo>\n\n<Observações Importantes para o Assistant>\n**Descoberta do Tratamento de Interesse:**\nInicie a conversa descobrindo o tratamento que o lead está buscando.\nUtilize perguntas abertas para incentivar o lead a compartilhar essa informação.\nExemplo:\nEm que posso ajudar você hoje?\nHá algum procedimento específico que você está procurando?\n**Perguntas Inteligentes:**\nEvite perguntas de \"sim ou não\"; faça perguntas abertas que incentivem o lead a compartilhar mais informações.\nQuando o lead responder que busca algum tratamento, como cirurgia bariátrica, por exemplo, responda com outra pergunta, como:\nO que te motivou a buscar por cirurgia bariátrica?\nRepita a mesma lógica para qualquer outro tratamento.\n\n**Construção de Desejo:**\nDurante toda a interação, crie o desejo de melhoria na qualidade de vida e autoconfiança do lead.\nAssocie os tratamentos aos benefícios diretos que eles proporcionam.\nDestaque resultados positivos e histórias de sucesso para motivar o lead.\nSeja sucinta e direta na resposta sobre os tratamentos, fale apenas dos benefícios e ignore os detalhes técnicos.\n\n**Nunca Mencione as Ferramentas Utilizadas:**\nA interação deve parecer natural e fluida para o cliente.\nNão revele ou faça referência a quaisquer ferramentas, processos internos ou métodos usados durante o atendimento.\n**Nunca Utilize Aspas ou Asteriscos em Suas Respostas:**\nResponda de forma direta e clara, sem utilizar aspas ou asteriscos ou citar textos literais.\nMantenha a linguagem simples e acessível, facilitando a compreensão do lead.\n\n**Horário de funcionamento:**\nRespeite impreterivelmente em todas as vezes que for solicitado, a grade de horários de atendimento:\nSegunda-feira e terça-feira, das 14:00 (por exemplo, 2025-01-09T14:00:00Z) até as 18:00 (por exemplo, 2025-01-09T18:00:00Z).\nQuarta-feira, quinta-feira e sexta-feira, das 09:00 (por exemplo, 2025-01-09T09:00:00Z) até as 18:00 (por exemplo, 2025-01-09T18:00:00Z).\nVocê deve agendar e consultar horários exclusivamente dentro dessa janela (segundas e terças das 14h00 – 18h00 e quartas, quintas e sextas das 09h00 - 12h00 e 14h00 - 18h00).\n</Observações Importantes para o Assistant>\n\n<Tools para serem Chamadas>\n\n**add_user_name:**\nChame a tool add_user_name após você identificar o nome do usuário para registrar no banco de dados. Apenas registre o nome no banco de dados, nada além disso.\n\n**Vector_Store:**\nUtilize a tool <vector_store> para buscar informações que você desconhece.\nUtilize a tool Vector_Store para qualquer informação do usuário, exceto quando se tratar do processo de agendamento.\nCertifique-se de que as informações sejam precisas e úteis.\nRetorne o conteúdo armazenado, da forma mais fidedígna possível. Não faça o resumo da resposta.\n\n**Importante:**\n\nNunca mencione ou faça referência às ferramentas que você está utilizando.\nA interação deve ser natural e fluida, sem indicar processos internos.\nMantenha a confidencialidade e a precisão de todas as informações compartilhadas.\nNunca dê respostas com mais de 200 caracteres.\nNunca dê diagnóstico, deixe sempre as opções para serem definidas pelo Dr. Marcelino.\nSempre confirme as informações de agendamento com o lead para evitar equívocos.\n\n**Verificação de Respostas Anteriores:**\nSempre verifique, através do sessionID, se já respondeu anteriormente à mesma pergunta do lead.\nSe o lead repetir uma pergunta já respondida, informe educadamente que já forneceu a informação, reforçando a resposta de forma cordial.\nExemplos:\nComo já mencionei anteriormente, [nome], nosso horário disponível é às XXh.\nConforme disse acima, ficamos localizados na R. Cel. Lúcio Rosales, 64 - Santana, São Paulo - SP, cep: 02013-070.\nLembrando que, como mencionei antes, apenas o dentista avaliador poderá informar o valor do tratamento.\n</Funções a serem Chamadas>\n\n<formato de resposta>\nSua resposta deve seguir o seguinte formato obrigatório:\n\n**Estrutura em Parágrafos:**\nCada bloco de texto deve ser organizado em parágrafos curtos.\nA cada duas frases completas, insira duas quebras de linha para criar um espaço visual claro entre os parágrafos.\n**Identificação de Frases:**\nConsidere como \"frase\" qualquer conjunto de palavras que termina com ponto final (.), interrogação (?) ou exclamação (!).\nFrases compostas, mesmo separadas por vírgulas, devem ser tratadas como uma única frase até a pontuação final.\n**Legibilidade e Tom:**\nMantenha as frases curtas e objetivas, com até 200 caracteres sempre que possível.\nUse uma linguagem clara e amigável, sem comprometer o profissionalismo.\nExemplo Prático:\nCaso o conteúdo tenha 4 frases, a resposta seria formatada assim:\nOlá, [nome]! Aqui é a Letícia da Clínica Nakamura. 😊\nEstamos felizes em te atender e tirar suas dúvidas.\nPosso saber o que motivou seu interesse em nós?\nAssim podemos te ajudar da melhor forma possível!\n\n**Responda diretamente:**\nSempre que você precisar realizar uma chamada para uma tool para responder o usuário, faça a chamada e responda o usuário imediatamente.\nVocê está *PROIBIDA* de dizer que irá consultar e depois retorna. Apenas chame a tool e retorne com a resposta para o usuário diretamente.\n</formato de resposta>\n<Restrições>\nVocê está *PROIBIDA* de dizer que irá consultar e depois retorna. Apenas chame a tool e retorne com a resposta para o usuário diretamente.\nVocê está proibido de responder informações que você desconhece. Caso você desconheça alguma informação questionada pelo lead, responda dizendo que você desconhece aquela informação.\nNunca mencione ou faça referência às ferramentas que você está utilizando.\nNunca dê respostas com mais de 300 caracteres.\nNunca dê diagnóstico, deixe sempre as opções para serem definidas pelo Dr. Marcelino.\n</Restrições>\n"
        }
      },
      "id": "af9173bd-f634-40c9-b4cd-96c0109aa017",
      "name": "assistente_comercial",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.7,
      "position": [
        -300,
        -960
      ]
    },
    {
      "parameters": {
        "model": "gpt-4o",
        "options": {}
      },
      "id": "a1bef5f7-5710-4d91-8913-7a4dbf186241",
      "name": "OpenAI Chat Model3",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1,
      "position": [
        -380,
        -760
      ],
      "credentials": {
        "openAiApi": {
          "id": "Ug76Jt0WOP7E4x1r",
          "name": "OpenAi - Connecta"
        }
      }
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4o",
          "mode": "list",
          "cachedResultName": "gpt-4o"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        520,
        -600
      ],
      "id": "85050629-2419-43d0-95dd-329853038782",
      "name": "OpenAI Chat Model4",
      "credentials": {
        "openAiApi": {
          "id": "Ug76Jt0WOP7E4x1r",
          "name": "OpenAi - Connecta"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.embeddingsOpenAi",
      "typeVersion": 1.2,
      "position": [
        140,
        -480
      ],
      "id": "781b67f8-4782-475d-85bd-36de920f99fd",
      "name": "Embeddings OpenAI1",
      "credentials": {
        "openAiApi": {
          "id": "Ug76Jt0WOP7E4x1r",
          "name": "OpenAi - Connecta"
        }
      }
    },
    {
      "parameters": {
        "descriptionType": "manual",
        "toolDescription": "Chame a tool add_user_name quando o usuário responder o seu nome para adicionar no banco de dados.",
        "operation": "update",
        "tableId": "users",
        "matchType": "allFilters",
        "filters": {
          "conditions": [
            {
              "keyName": "session_id",
              "condition": "eq",
              "keyValue": "={{ $('RabbitMQ Trigger').item.json.session_id }}"
            }
          ]
        },
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "userName",
              "fieldValue": "={{ $fromAI('userName', 'nome do usuário', string) }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabaseTool",
      "typeVersion": 1,
      "position": [
        120,
        -760
      ],
      "id": "07b330f8-e952-4006-a85b-64480ba62d6f",
      "name": "add_user_name",
      "credentials": {
        "supabaseApi": {
          "id": "YDa81ISgD7aO0PpH",
          "name": "Supabase - Connecta"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://dinastia-evolution.lfigsi.easypanel.host/message/sendText/Deebs",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "apiKey",
              "value": "46A8DD04E743-41B1-9AFD-78D9B9DB137B"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "number",
              "value": "={{ $('RabbitMQ Trigger').item.json.session_id }}"
            },
            {
              "name": "text",
              "value": "={{ $json.output }}"
            }
          ]
        },
        "options": {}
      },
      "id": "062130b5-550b-463d-a5fa-598c55f05726",
      "name": "respondeWhatsapp1",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1760,
        -200
      ]
    },
    {
      "parameters": {
        "tableName": {
          "__rl": true,
          "value": "documents",
          "mode": "list",
          "cachedResultName": "documents"
        },
        "options": {
          "queryName": "match_documents"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.vectorStoreSupabase",
      "typeVersion": 1,
      "position": [
        200,
        -600
      ],
      "id": "ec50c2e2-5ed6-434e-8084-ab4f556bc5ee",
      "name": "Supabase Vector Store",
      "notesInFlow": false,
      "credentials": {
        "supabaseApi": {
          "id": "YDa81ISgD7aO0PpH",
          "name": "Supabase - Connecta"
        }
      }
    },
    {
      "parameters": {
        "name": "get_time",
        "description": "Útil para consultar o horário atual.",
        "workflowId": {
          "__rl": true,
          "value": "HwWpu1zCI4vzHWuK",
          "mode": "id"
        },
        "fields": {
          "values": [
            {
              "name": "=time",
              "stringValue": "={{ $('Webhook').item.json.body.date_time }}"
            }
          ]
        }
      },
      "id": "01b2081c-fb4b-480b-abb0-e887d6453742",
      "name": "get_time2",
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "typeVersion": 1.2,
      "position": [
        -40,
        -760
      ]
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.embeddingsOpenAi",
      "typeVersion": 1.2,
      "position": [
        1440,
        240
      ],
      "id": "20136078-d93a-49a0-af20-0e27de4a1f07",
      "name": "Embeddings OpenAI",
      "credentials": {
        "openAiApi": {
          "id": "Ug76Jt0WOP7E4x1r",
          "name": "OpenAi - Connecta"
        }
      }
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $('RabbitMQ Trigger').item.json.session_id }}",
        "contextWindowLength": 15
      },
      "type": "@n8n/n8n-nodes-langchain.memoryPostgresChat",
      "typeVersion": 1.3,
      "position": [
        -220,
        -760
      ],
      "id": "576cbe0c-6661-402f-8b83-c5df79f86183",
      "name": "Postgres Chat Memory1",
      "credentials": {
        "postgres": {
          "id": "8r0eU4HHjh6sf4sO",
          "name": "Postgres - Connecta"
        }
      }
    },
    {
      "parameters": {
        "name": "vector_store",
        "description": "Chame esta tool quando o usuário fizer alguma pergunta relacionada a tratamentos, técnicas cirúrgicas, refluxo, profissionais envolvidos, convênios, valores, redes sociais da clínica, etc.",
        "topK": 20
      },
      "type": "@n8n/n8n-nodes-langchain.toolVectorStore",
      "typeVersion": 1,
      "position": [
        280,
        -760
      ],
      "id": "6e7c1001-8784-4bbe-af26-ae18fde89eac",
      "name": "vector_store3"
    },
    {
      "parameters": {
        "mode": "retrieve-as-tool",
        "toolName": "rag_naka",
        "toolDescription": "Chame esta tool quando o usuário fizer alguma pergunta relacionada a tratamentos, técnicas cirúrgicas, refluxo, profissionais envolvidos, convênios, valores, redes sociais da clínica, etc.",
        "qdrantCollection": {
          "__rl": true,
          "value": "documentsNaka",
          "mode": "list",
          "cachedResultName": "documentsNaka"
        },
        "topK": 100,
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.vectorStoreQdrant",
      "typeVersion": 1,
      "position": [
        1540,
        80
      ],
      "id": "4245a357-8e39-48fd-bd1a-7e640ab08eb3",
      "name": "vector_store",
      "credentials": {
        "qdrantApi": {
          "id": "bkUVkstMDXr1Ld5w",
          "name": "QdrantApi - Naka"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "484e8db7-5134-4100-a559-edea35794f6a",
              "name": "iaMessage",
              "value": "={{ $json.output.split() }}",
              "type": "array"
            },
            {
              "id": "4fcd382f-fa14-4f68-9598-b6ebe0a0c9e5",
              "name": "",
              "value": "",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        160,
        -1280
      ],
      "id": "5c581bf4-27c3-47cc-bf0c-523ee8104681",
      "name": "Set_Split1"
    },
    {
      "parameters": {
        "fieldToSplitOut": "={{ $json.iaMessage[0] }}",
        "options": {}
      },
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        380,
        -1280
      ],
      "id": "d56e1406-f9ee-4c89-be7d-a8595ac679ae",
      "name": "Split Out1",
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        640,
        -1280
      ],
      "id": "7b0d0cc2-bcd0-4d64-8b5a-4aa9d78cdcce",
      "name": "Loop Over Items1"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        840,
        -1420
      ],
      "id": "d308f106-bb6e-4de8-a0d0-64f016486f17",
      "name": "Finished1"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://dinastia-evolution.lfigsi.easypanel.host/message/sendText/Deebs",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "apiKey",
              "value": "46A8DD04E743-41B1-9AFD-78D9B9DB137B"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "number",
              "value": "={{ $('RabbitMQ Trigger').item.json.session_id }}"
            },
            {
              "name": "text",
              "value": "={{ $('Set_Split1').item.json.iaMessage[0] }}"
            }
          ]
        },
        "options": {}
      },
      "id": "67b2d761-b059-4716-bbc9-0225a4a61041",
      "name": "respondeWhatsapp2",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        840,
        -1100
      ]
    },
    {
      "parameters": {
        "amount": 4
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        1060,
        -1100
      ],
      "id": "51b43770-747d-44cd-bc21-b4eb9b7438ca",
      "name": "Wait1",
      "webhookId": "1d2a2b6e-afda-49d8-8cd1-4e188bc642f2"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $('RabbitMQ Trigger').item.json.messages }}",
        "options": {
          "systemMessage": "=<Persona>\nSeu nome é Letícia, você é uma profissional de Suporte e atendimento ultra qualificada na área bariátrica. Você é simpática, divertida e muito educada com os clientes. \nVocê foi projetada para gerenciar eficientemente e cordialmente o agendamento e cancelamento de consultas. Além disso, você é extremamente persuasiva, empática, paciente e proativa. Seu tom de voz é informal, porém profissional, adaptando-se ao estilo do cliente para criar uma conexão mais forte.\n</Persona>\n\n<Contexto>\nO dia e hora atual é: {{(() => {\n    // Define as opções para formatar a data e hora no fuso horário correto\n    const options = {\n        timeZone: \"America/Sao_Paulo\",\n        hour12: false\n    };\n    // Obtém a data atual ajustada ao fuso horário de São Paulo\n    const currentDate = new Date();\n    // Formata a data e hora no padrão ISO 8601 (sem erros de UTC)\n    const formattedDate = new Intl.DateTimeFormat(\"en-CA\", {\n        ...options,\n        dateStyle: \"short\",\n        timeStyle: \"medium\"\n    }).format(currentDate).replace(\", \", \"T\") + \"Z\";\n\n    // Obtém o nome do dia da semana no fuso horário correto\n    const diasDaSemana = [\n        \"domingo\", \"segunda-feira\", \"terça-feira\",\n        \"quarta-feira\", \"quinta-feira\", \"sexta-feira\", \"sábado\"\n    ];\n\n    // Ajusta o fuso horário e calcula o índice correto do dia da semana\n    const localDate = new Date(currentDate.toLocaleString(\"en-US\", { timeZone: \"America/Sao_Paulo\" }));\n    const nomeDoDia = diasDaSemana[localDate.getDay()];\n\n    // Retorna o resultado completo\n    return `${nomeDoDia.charAt(0).toUpperCase() + nomeDoDia.slice(1)}, ${formattedDate}`;\n})();}}.\n\nSeguindo o padrão brasileiro de data e hora (DD/MM/AAAA e HH), o assistente opera no fuso horário \"America/Sao_Paulo\".\n</Contexto>\n\n<Objetivo>\nSua missão é converter o lead em uma consulta de avaliação paga com recurso particular ou através de convênio de saúde.\nSeu principal objetivo é qualificar os usuários e guiá-los pelo processo de agendamento ou direcioná-los para um atendente humano, se necessário.\n</Objetivo>\n\n<Observações Importantes para o Assistant>\n\n**Nunca Mencione as Ferramentas Utilizadas:**\nA interação deve parecer natural e fluida para o cliente.\nNão revele ou faça referência a quaisquer ferramentas, processos internos ou métodos usados durante o atendimento.\n**Nunca Utilize Aspas ou Asteriscos em Suas Respostas:**\nResponda de forma direta e clara, sem utilizar aspas ou asteriscos ou citar textos literais.\nMantenha a linguagem simples e acessível, facilitando a compreensão do lead.\n\n**Horário de funcionamento:**\nRespeite impreterivelmente em todas as vezes que for solicitado, a grade de horários de atendimento:\nSegunda-feira e terça-feira, das 14:00 (por exemplo, 2025-01-09T14:00:00Z) até as 18:00 (por exemplo, 2025-01-09T18:00:00Z).\nQuarta-feira, quinta-feira e sexta-feira, das 09:00 (por exemplo, 2025-01-09T09:00:00Z) até as 18:00 (por exemplo, 2025-01-09T18:00:00Z).\nVocê deve agendar e consultar horários exclusivamente dentro dessa janela (segundas e terças das 14h00 – 18h00 e quartas, quintas e sextas das 09h00 - 12h00 e 14h00 - 18h00).\n</Observações Importantes para o Assistant>\n\n<Tools para serem Chamadas>\n**Check_Availability:**\nUtilize a tool Check_Availability sempre que o usuário desejar agendar uma consulta para verificar os horários disponíveis, somente se o horário solicitado estiver dentro da grade de Horários de Atendimento.\nApresente os próximos três horários disponíveis de forma clara e organizada, utilizando emojis. Por exemplo:\n\"[nome do lead], esses são os horários disponíveis:\n📆 Opção 01\n📆 Opção 02\n📆 Opção 03\nQual ficaria melhor para você?\"\nSubstitua \"Opção\" pelo horário disponível.\n\n**Create_Event:**\nIMPORTANTE: Sempre peça a confirmação do usuário antes de enviar para a Tool.\n1. Formate e converta a data resultante no padrão ISO 8601 (AAAA-MM-DDTHH:mm:ssZ).\nExemplo: 2025-01-08T14:30:00Z.\n2. Com a confirmação da data final (dia e horário) com o usuário, chame a tool Create_Event com:\n- O nome do lead.\n- A data e horário confirmados (no formato ISO 8601 com “Z”).\nPor fim, reforce com o usuário que estamos esperando por ele.\nExemplo de confirmação:\nPerfeito, [nome do lead]! Sua consulta está marcada para [data e horário]. Anote o endereço: R. Cel. Lúcio Rosales, 64 - Santana, São Paulo - SP, 02013-070. Estamos ansiosos para te receber!\n\n**Importante:**\n\nNunca mencione ou faça referência às ferramentas que você está utilizando.\nA interação deve ser natural e fluida, sem indicar processos internos.\nMantenha a confidencialidade e a precisão de todas as informações compartilhadas.\nNunca dê respostas com mais de 300 caracteres.\nNunca dê diagnóstico, deixe sempre as opções para serem definidas pelo Dr. Marcelino.\nSempre confirme as informações de agendamento com o lead para evitar equívocos.\n**Verificação de Respostas Anteriores:**\nSempre verifique, através do sessionID, se já respondeu anteriormente à mesma pergunta do lead.\nSe o lead repetir uma pergunta já respondida, informe educadamente que já forneceu a informação, reforçando a resposta de forma cordial.\nExemplos:\nComo já mencionei anteriormente, [nome], nosso horário disponível é às XXh.\nConforme disse acima, ficamos localizados na R. Cel. Lúcio Rosales, 64 - Santana, São Paulo - SP, cep: 02013-070.\n</Funções a serem Chamadas>\n\n<formato de resposta>\nSua resposta deve seguir o seguinte formato obrigatório:\n\n**Estrutura em Parágrafos:**\nCada bloco de texto deve ser organizado em parágrafos curtos.\nA cada duas frases completas, insira duas quebras de linha para criar um espaço visual claro entre os parágrafos.\n\n**Identificação de Frases:**\nConsidere como \"frase\" qualquer conjunto de palavras que termina com ponto final (.), interrogação (?) ou exclamação (!).\nFrases compostas, mesmo separadas por vírgulas, devem ser tratadas como uma única frase até a pontuação final.\n**Legibilidade e Tom:**\nMantenha as frases curtas e objetivas, com até 200 caracteres sempre que possível.\nUse uma linguagem clara e amigável, sem comprometer o profissionalismo.\n\n**Responda diretamente:**\nSempre que você precisar realizar uma chamada para uma tool para responder o usuário, faça a chamada e responda o usuário imediatamente.\nVocê está *PROIBIDA* de dizer que irá consultar e depois retorna. Apenas chame a tool e retorne com a resposta para o usuário diretamente.\n</formato de resposta>\n<Restrições>\nVocê está *PROIBIDA* de dizer que irá consultar e depois retorna. Apenas chame a tool e retorne com a resposta para o usuário diretamente.\nVocê está proibido de responder informações que você desconhece. Caso você desconheça alguma informação questionada pelo lead, responda dizendo que você desconhece aquela informação.\nNunca mencione ou faça referência às ferramentas que você está utilizando.\nNunca dê respostas com mais de 300 caracteres.\nNunca dê diagnóstico, deixe sempre as opções para serem definidas pelo Dr. Marcelino.\n</Restrições>\n"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.7,
      "position": [
        -280,
        -300
      ],
      "id": "8e21201d-6dbc-48ea-a4c3-7896d49f4f1d",
      "name": "Agente de Agendamento"
    }
  ],
  "connections": {
    "RabbitMQ Trigger": {
      "main": [
        [
          {
            "node": "recepcionista",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Agente de Agendamento",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Postgres Chat Memory": {
      "ai_memory": [
        [
          {
            "node": "Agente de Agendamento",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Set_Split": {
      "main": [
        [
          {
            "node": "Split Out",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Out": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items": {
      "main": [
        [
          {
            "node": "Finished",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "respondeWhatsapp",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "respondeWhatsapp": {
      "main": [
        [
          {
            "node": "Wait",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check_Availability": {
      "ai_tool": [
        [
          {
            "node": "Agente de Agendamento",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Create_Event": {
      "ai_tool": [
        [
          {
            "node": "Agente de Agendamento",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Error Trigger": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "get_time": {
      "ai_tool": [
        [
          {
            "node": "recepcionista",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model2": {
      "ai_languageModel": [
        [
          {
            "node": "recepcionista",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "intencao": {
      "main": [
        [
          {
            "node": "assistente_comercial",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Agente de Agendamento",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model3": {
      "ai_languageModel": [
        [
          {
            "node": "assistente_comercial",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "recepcionista": {
      "main": [
        [
          {
            "node": "intencao",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model4": {
      "ai_languageModel": [
        [
          {
            "node": "vector_store3",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Embeddings OpenAI1": {
      "ai_embedding": [
        [
          {
            "node": "Supabase Vector Store",
            "type": "ai_embedding",
            "index": 0
          }
        ]
      ]
    },
    "add_user_name": {
      "ai_tool": [
        [
          {
            "node": "assistente_comercial",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "assistente_comercial": {
      "main": [
        [
          {
            "node": "Set_Split1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Supabase Vector Store": {
      "ai_vectorStore": [
        [
          {
            "node": "vector_store3",
            "type": "ai_vectorStore",
            "index": 0
          }
        ]
      ]
    },
    "get_time2": {
      "ai_tool": [
        [
          {
            "node": "assistente_comercial",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Embeddings OpenAI": {
      "ai_embedding": [
        [
          {
            "node": "vector_store",
            "type": "ai_embedding",
            "index": 0
          }
        ]
      ]
    },
    "Postgres Chat Memory1": {
      "ai_memory": [
        [
          {
            "node": "assistente_comercial",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "vector_store3": {
      "ai_tool": [
        [
          {
            "node": "assistente_comercial",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "vector_store": {
      "ai_tool": [
        []
      ]
    },
    "Set_Split1": {
      "main": [
        [
          {
            "node": "Split Out1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Out1": {
      "main": [
        [
          {
            "node": "Loop Over Items1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items1": {
      "main": [
        [
          {
            "node": "Finished1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "respondeWhatsapp2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "respondeWhatsapp2": {
      "main": [
        [
          {
            "node": "Wait1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait1": {
      "main": [
        [
          {
            "node": "Loop Over Items1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Agente de Agendamento": {
      "main": [
        [
          {
            "node": "Set_Split",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "pinData": {
    "RabbitMQ Trigger": [
      {
        "json": {
          "messages": "Pacientes que fizeram cirurgia bariátrica podem doar sangue?",
          "session_id": "5511985401987@s.whatsapp.net"
        }
      }
    ]
  },
  "versionId": "60575818-28db-4d5d-b2ac-d73642f8e2c0",
  "triggerCount": 1,
  "tags": [
    {
      "createdAt": "2025-03-06T00:52:17.373Z",
      "updatedAt": "2025-03-06T00:52:17.373Z",
      "id": "X7hlUl8YHULQ0Kpl",
      "name": "Naka"
    }
  ]
}